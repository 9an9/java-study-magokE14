- Design Pattern
  : 일종의 설계 기법이며, 설계 방법이다.
  
- 목적
  : SW 재사용성, 호환성, 유지 보수성을 보장.
  
- 특징
  : 디자인 패턴은 특정한 구현이 아닌 하나의 아이디어.
  
  프로젝트에 항상 적용해야 하는 것은 아니지만, 추후 (재사용, 호환, 유지 보수시) 발생하는 문제해결을 예방하기 위해 패턴을 만들어 둔 것.
  
- SOLID 객체지향 설계 원칙

  1. Single Responsibility Principle(단일 책임 원칙)
    하나의 클래스는 하나의 역할만을 가지도록 설계해야 한다.
    
  2. Open Close Principle (개발 폐쇄 원칙)
    확장 (상속)에는 열려있고, 수정에는 닫혀 있어야 한다.
    기존의 코드를 변경하지 않으면서 새로운 기능을 추가할 수 있도록 설계하는 원칙.
    
  3. Liskov Substitution Principle (리스코프 치환 원칙)
    (상속관계에서) 자식이 부모의 자리에 항상 교체될 수 있어야 한다.
    
  4. Interface Segregation Principle(인터페이스 분리 원칙)
    인터페이스가 잘 분리되어서, 클래스가 꼭 필요한 인터페이스만 구현하도록 해야한다.
    
  5. Dependency Inversion Property(의존성 역전 원칙)
    의존 관계를 맺을 때 변화하기 쉬운 것 또는 변화가 자주 되는것보다는 
    변화하기가 어려운 것, 변화가 거의 되지 않는 것에 의존하는 원칙
    
    상위 모듈이 하위 모듈에 의존하면 안되고 추상화에 의존하며,
    추상화는 세부사항에 의존하면 안된다.
    
    참고자료 : https://gyoogle.dev/blog/design-pattern/Overview.html
